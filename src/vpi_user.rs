/* automatically generated by rust-bindgen 0.69.4 */

pub const _INTTYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const vpiAlways: u32 = 1;
pub const vpiAssignStmt: u32 = 2;
pub const vpiAssignment: u32 = 3;
pub const vpiBegin: u32 = 4;
pub const vpiCase: u32 = 5;
pub const vpiCaseItem: u32 = 6;
pub const vpiConstant: u32 = 7;
pub const vpiContAssign: u32 = 8;
pub const vpiDeassign: u32 = 9;
pub const vpiDefParam: u32 = 10;
pub const vpiDelayControl: u32 = 11;
pub const vpiDisable: u32 = 12;
pub const vpiEventControl: u32 = 13;
pub const vpiEventStmt: u32 = 14;
pub const vpiFor: u32 = 15;
pub const vpiForce: u32 = 16;
pub const vpiForever: u32 = 17;
pub const vpiFork: u32 = 18;
pub const vpiFuncCall: u32 = 19;
pub const vpiFunction: u32 = 20;
pub const vpiGate: u32 = 21;
pub const vpiIf: u32 = 22;
pub const vpiIfElse: u32 = 23;
pub const vpiInitial: u32 = 24;
pub const vpiIntegerVar: u32 = 25;
pub const vpiInterModPath: u32 = 26;
pub const vpiIterator: u32 = 27;
pub const vpiIODecl: u32 = 28;
pub const vpiMemory: u32 = 29;
pub const vpiMemoryWord: u32 = 30;
pub const vpiModPath: u32 = 31;
pub const vpiModule: u32 = 32;
pub const vpiNamedBegin: u32 = 33;
pub const vpiNamedEvent: u32 = 34;
pub const vpiNamedFork: u32 = 35;
pub const vpiNet: u32 = 36;
pub const vpiNetBit: u32 = 37;
pub const vpiNullStmt: u32 = 38;
pub const vpiOperation: u32 = 39;
pub const vpiParamAssign: u32 = 40;
pub const vpiParameter: u32 = 41;
pub const vpiPartSelect: u32 = 42;
pub const vpiPathTerm: u32 = 43;
pub const vpiPort: u32 = 44;
pub const vpiPortBit: u32 = 45;
pub const vpiPrimTerm: u32 = 46;
pub const vpiRealVar: u32 = 47;
pub const vpiReg: u32 = 48;
pub const vpiRegBit: u32 = 49;
pub const vpiRelease: u32 = 50;
pub const vpiRepeat: u32 = 51;
pub const vpiRepeatControl: u32 = 52;
pub const vpiSchedEvent: u32 = 53;
pub const vpiSpecParam: u32 = 54;
pub const vpiSwitch: u32 = 55;
pub const vpiSysFuncCall: u32 = 56;
pub const vpiSysTaskCall: u32 = 57;
pub const vpiTableEntry: u32 = 58;
pub const vpiTask: u32 = 59;
pub const vpiTaskCall: u32 = 60;
pub const vpiTchk: u32 = 61;
pub const vpiTchkTerm: u32 = 62;
pub const vpiTimeVar: u32 = 63;
pub const vpiTimeQueue: u32 = 64;
pub const vpiUdp: u32 = 65;
pub const vpiUdpDefn: u32 = 66;
pub const vpiUserSystf: u32 = 67;
pub const vpiVarSelect: u32 = 68;
pub const vpiWait: u32 = 69;
pub const vpiWhile: u32 = 70;
pub const vpiAttribute: u32 = 105;
pub const vpiBitSelect: u32 = 106;
pub const vpiCallback: u32 = 107;
pub const vpiDelayTerm: u32 = 108;
pub const vpiDelayDevice: u32 = 109;
pub const vpiFrame: u32 = 110;
pub const vpiGateArray: u32 = 111;
pub const vpiModuleArray: u32 = 112;
pub const vpiPrimitiveArray: u32 = 113;
pub const vpiNetArray: u32 = 114;
pub const vpiRange: u32 = 115;
pub const vpiRegArray: u32 = 116;
pub const vpiSwitchArray: u32 = 117;
pub const vpiUdpArray: u32 = 118;
pub const vpiContAssignBit: u32 = 128;
pub const vpiNamedEventArray: u32 = 129;
pub const vpiIndexedPartSelect: u32 = 130;
pub const vpiGenScopeArray: u32 = 133;
pub const vpiGenScope: u32 = 134;
pub const vpiGenVar: u32 = 135;
pub const vpiCondition: u32 = 71;
pub const vpiDelay: u32 = 72;
pub const vpiElseStmt: u32 = 73;
pub const vpiForIncStmt: u32 = 74;
pub const vpiForInitStmt: u32 = 75;
pub const vpiHighConn: u32 = 76;
pub const vpiLhs: u32 = 77;
pub const vpiIndex: u32 = 78;
pub const vpiLeftRange: u32 = 79;
pub const vpiLowConn: u32 = 80;
pub const vpiParent: u32 = 81;
pub const vpiRhs: u32 = 82;
pub const vpiRightRange: u32 = 83;
pub const vpiScope: u32 = 84;
pub const vpiSysTfCall: u32 = 85;
pub const vpiTchkDataTerm: u32 = 86;
pub const vpiTchkNotifier: u32 = 87;
pub const vpiTchkRefTerm: u32 = 88;
pub const vpiArgument: u32 = 89;
pub const vpiBit: u32 = 90;
pub const vpiDriver: u32 = 91;
pub const vpiInternalScope: u32 = 92;
pub const vpiLoad: u32 = 93;
pub const vpiModDataPathIn: u32 = 94;
pub const vpiModPathIn: u32 = 95;
pub const vpiModPathOut: u32 = 96;
pub const vpiOperand: u32 = 97;
pub const vpiPortInst: u32 = 98;
pub const vpiProcess: u32 = 99;
pub const vpiVariables: u32 = 100;
pub const vpiUse: u32 = 101;
pub const vpiExpr: u32 = 102;
pub const vpiPrimitive: u32 = 103;
pub const vpiStmt: u32 = 104;
pub const vpiActiveTimeFormat: u32 = 119;
pub const vpiInTerm: u32 = 120;
pub const vpiInstanceArray: u32 = 121;
pub const vpiLocalDriver: u32 = 122;
pub const vpiLocalLoad: u32 = 123;
pub const vpiOutTerm: u32 = 124;
pub const vpiPorts: u32 = 125;
pub const vpiSimNet: u32 = 126;
pub const vpiTaskFunc: u32 = 127;
pub const vpiBaseExpr: u32 = 131;
pub const vpiWidthExpr: u32 = 132;
pub const vpiAutomatics: u32 = 136;
pub const vpiUndefined: i32 = -1;
pub const vpiType: u32 = 1;
pub const vpiName: u32 = 2;
pub const vpiFullName: u32 = 3;
pub const vpiSize: u32 = 4;
pub const vpiFile: u32 = 5;
pub const vpiLineNo: u32 = 6;
pub const vpiTopModule: u32 = 7;
pub const vpiCellInstance: u32 = 8;
pub const vpiDefName: u32 = 9;
pub const vpiProtected: u32 = 10;
pub const vpiTimeUnit: u32 = 11;
pub const vpiTimePrecision: u32 = 12;
pub const vpiDefNetType: u32 = 13;
pub const vpiUnconnDrive: u32 = 14;
pub const vpiHighZ: u32 = 1;
pub const vpiPull1: u32 = 2;
pub const vpiPull0: u32 = 3;
pub const vpiDefFile: u32 = 15;
pub const vpiDefLineNo: u32 = 16;
pub const vpiDefDelayMode: u32 = 47;
pub const vpiDelayModeNone: u32 = 1;
pub const vpiDelayModePath: u32 = 2;
pub const vpiDelayModeDistrib: u32 = 3;
pub const vpiDelayModeUnit: u32 = 4;
pub const vpiDelayModeZero: u32 = 5;
pub const vpiDelayModeMTM: u32 = 6;
pub const vpiDefDecayTime: u32 = 48;
pub const vpiScalar: u32 = 17;
pub const vpiVector: u32 = 18;
pub const vpiExplicitName: u32 = 19;
pub const vpiDirection: u32 = 20;
pub const vpiInput: u32 = 1;
pub const vpiOutput: u32 = 2;
pub const vpiInout: u32 = 3;
pub const vpiMixedIO: u32 = 4;
pub const vpiNoDirection: u32 = 5;
pub const vpiConnByName: u32 = 21;
pub const vpiNetType: u32 = 22;
pub const vpiWire: u32 = 1;
pub const vpiWand: u32 = 2;
pub const vpiWor: u32 = 3;
pub const vpiTri: u32 = 4;
pub const vpiTri0: u32 = 5;
pub const vpiTri1: u32 = 6;
pub const vpiTriReg: u32 = 7;
pub const vpiTriAnd: u32 = 8;
pub const vpiTriOr: u32 = 9;
pub const vpiSupply1: u32 = 10;
pub const vpiSupply0: u32 = 11;
pub const vpiNone: u32 = 12;
pub const vpiUwire: u32 = 13;
pub const vpiExplicitScalared: u32 = 23;
pub const vpiExplicitVectored: u32 = 24;
pub const vpiExpanded: u32 = 25;
pub const vpiImplicitDecl: u32 = 26;
pub const vpiChargeStrength: u32 = 27;
pub const vpiArray: u32 = 28;
pub const vpiPortIndex: u32 = 29;
pub const vpiTermIndex: u32 = 30;
pub const vpiStrength0: u32 = 31;
pub const vpiStrength1: u32 = 32;
pub const vpiPrimType: u32 = 33;
pub const vpiAndPrim: u32 = 1;
pub const vpiNandPrim: u32 = 2;
pub const vpiNorPrim: u32 = 3;
pub const vpiOrPrim: u32 = 4;
pub const vpiXorPrim: u32 = 5;
pub const vpiXnorPrim: u32 = 6;
pub const vpiBufPrim: u32 = 7;
pub const vpiNotPrim: u32 = 8;
pub const vpiBufif0Prim: u32 = 9;
pub const vpiBufif1Prim: u32 = 10;
pub const vpiNotif0Prim: u32 = 11;
pub const vpiNotif1Prim: u32 = 12;
pub const vpiNmosPrim: u32 = 13;
pub const vpiPmosPrim: u32 = 14;
pub const vpiCmosPrim: u32 = 15;
pub const vpiRnmosPrim: u32 = 16;
pub const vpiRpmosPrim: u32 = 17;
pub const vpiRcmosPrim: u32 = 18;
pub const vpiRtranPrim: u32 = 19;
pub const vpiRtranif0Prim: u32 = 20;
pub const vpiRtranif1Prim: u32 = 21;
pub const vpiTranPrim: u32 = 22;
pub const vpiTranif0Prim: u32 = 23;
pub const vpiTranif1Prim: u32 = 24;
pub const vpiPullupPrim: u32 = 25;
pub const vpiPulldownPrim: u32 = 26;
pub const vpiSeqPrim: u32 = 27;
pub const vpiCombPrim: u32 = 28;
pub const vpiPolarity: u32 = 34;
pub const vpiDataPolarity: u32 = 35;
pub const vpiPositive: u32 = 1;
pub const vpiNegative: u32 = 2;
pub const vpiUnknown: u32 = 3;
pub const vpiEdge: u32 = 36;
pub const vpiNoEdge: u32 = 0;
pub const vpiEdge01: u32 = 1;
pub const vpiEdge10: u32 = 2;
pub const vpiEdge0x: u32 = 4;
pub const vpiEdgex1: u32 = 8;
pub const vpiEdge1x: u32 = 16;
pub const vpiEdgex0: u32 = 32;
pub const vpiPosedge: u32 = 13;
pub const vpiNegedge: u32 = 50;
pub const vpiAnyEdge: u32 = 63;
pub const vpiPathType: u32 = 37;
pub const vpiPathFull: u32 = 1;
pub const vpiPathParallel: u32 = 2;
pub const vpiTchkType: u32 = 38;
pub const vpiSetup: u32 = 1;
pub const vpiHold: u32 = 2;
pub const vpiPeriod: u32 = 3;
pub const vpiWidth: u32 = 4;
pub const vpiSkew: u32 = 5;
pub const vpiRecovery: u32 = 6;
pub const vpiNoChange: u32 = 7;
pub const vpiSetupHold: u32 = 8;
pub const vpiFullskew: u32 = 9;
pub const vpiRecrem: u32 = 10;
pub const vpiRemoval: u32 = 11;
pub const vpiTimeskew: u32 = 12;
pub const vpiOpType: u32 = 39;
pub const vpiMinusOp: u32 = 1;
pub const vpiPlusOp: u32 = 2;
pub const vpiNotOp: u32 = 3;
pub const vpiBitNegOp: u32 = 4;
pub const vpiUnaryAndOp: u32 = 5;
pub const vpiUnaryNandOp: u32 = 6;
pub const vpiUnaryOrOp: u32 = 7;
pub const vpiUnaryNorOp: u32 = 8;
pub const vpiUnaryXorOp: u32 = 9;
pub const vpiUnaryXNorOp: u32 = 10;
pub const vpiSubOp: u32 = 11;
pub const vpiDivOp: u32 = 12;
pub const vpiModOp: u32 = 13;
pub const vpiEqOp: u32 = 14;
pub const vpiNeqOp: u32 = 15;
pub const vpiCaseEqOp: u32 = 16;
pub const vpiCaseNeqOp: u32 = 17;
pub const vpiGtOp: u32 = 18;
pub const vpiGeOp: u32 = 19;
pub const vpiLtOp: u32 = 20;
pub const vpiLeOp: u32 = 21;
pub const vpiLShiftOp: u32 = 22;
pub const vpiRShiftOp: u32 = 23;
pub const vpiAddOp: u32 = 24;
pub const vpiMultOp: u32 = 25;
pub const vpiLogAndOp: u32 = 26;
pub const vpiLogOrOp: u32 = 27;
pub const vpiBitAndOp: u32 = 28;
pub const vpiBitOrOp: u32 = 29;
pub const vpiBitXorOp: u32 = 30;
pub const vpiBitXNorOp: u32 = 31;
pub const vpiBitXnorOp: u32 = 31;
pub const vpiConditionOp: u32 = 32;
pub const vpiConcatOp: u32 = 33;
pub const vpiMultiConcatOp: u32 = 34;
pub const vpiEventOrOp: u32 = 35;
pub const vpiNullOp: u32 = 36;
pub const vpiListOp: u32 = 37;
pub const vpiMinTypMaxOp: u32 = 38;
pub const vpiPosedgeOp: u32 = 39;
pub const vpiNegedgeOp: u32 = 40;
pub const vpiArithLShiftOp: u32 = 41;
pub const vpiArithRShiftOp: u32 = 42;
pub const vpiPowerOp: u32 = 43;
pub const vpiConstType: u32 = 40;
pub const vpiDecConst: u32 = 1;
pub const vpiRealConst: u32 = 2;
pub const vpiBinaryConst: u32 = 3;
pub const vpiOctConst: u32 = 4;
pub const vpiHexConst: u32 = 5;
pub const vpiStringConst: u32 = 6;
pub const vpiIntConst: u32 = 7;
pub const vpiTimeConst: u32 = 8;
pub const vpiBlocking: u32 = 41;
pub const vpiCaseType: u32 = 42;
pub const vpiCaseExact: u32 = 1;
pub const vpiCaseX: u32 = 2;
pub const vpiCaseZ: u32 = 3;
pub const vpiNetDeclAssign: u32 = 43;
pub const vpiFuncType: u32 = 44;
pub const vpiIntFunc: u32 = 1;
pub const vpiRealFunc: u32 = 2;
pub const vpiTimeFunc: u32 = 3;
pub const vpiSizedFunc: u32 = 4;
pub const vpiSizedSignedFunc: u32 = 5;
pub const vpiSysFuncType: u32 = 44;
pub const vpiSysFuncInt: u32 = 1;
pub const vpiSysFuncReal: u32 = 2;
pub const vpiSysFuncTime: u32 = 3;
pub const vpiSysFuncSized: u32 = 4;
pub const vpiUserDefn: u32 = 45;
pub const vpiScheduled: u32 = 46;
pub const vpiActive: u32 = 49;
pub const vpiAutomatic: u32 = 50;
pub const vpiCell: u32 = 51;
pub const vpiConfig: u32 = 52;
pub const vpiConstantSelect: u32 = 53;
pub const vpiDecompile: u32 = 54;
pub const vpiDefAttribute: u32 = 55;
pub const vpiDelayType: u32 = 56;
pub const vpiModPathDelay: u32 = 1;
pub const vpiInterModPathDelay: u32 = 2;
pub const vpiMIPDelay: u32 = 3;
pub const vpiIteratorType: u32 = 57;
pub const vpiLibrary: u32 = 58;
pub const vpiMultiArray: u32 = 59;
pub const vpiOffset: u32 = 60;
pub const vpiResolvedNetType: u32 = 61;
pub const vpiSaveRestartID: u32 = 62;
pub const vpiSaveRestartLocation: u32 = 63;
pub const vpiValid: u32 = 64;
pub const vpiValidFalse: u32 = 0;
pub const vpiValidTrue: u32 = 1;
pub const vpiSigned: u32 = 65;
pub const vpiLocalParam: u32 = 70;
pub const vpiModPathHasIfNone: u32 = 71;
pub const vpiIndexedPartSelectType: u32 = 72;
pub const vpiPosIndexed: u32 = 1;
pub const vpiNegIndexed: u32 = 2;
pub const vpiIsMemory: u32 = 73;
pub const vpiIsProtected: u32 = 74;
pub const vpiStop: u32 = 66;
pub const vpiFinish: u32 = 67;
pub const vpiReset: u32 = 68;
pub const vpiSetInteractiveScope: u32 = 69;
pub const VPI_MCD_STDOUT: u32 = 1;
pub const vpiScaledRealTime: u32 = 1;
pub const vpiSimTime: u32 = 2;
pub const vpiSuppressTime: u32 = 3;
pub const vpiSupplyDrive: u32 = 128;
pub const vpiStrongDrive: u32 = 64;
pub const vpiPullDrive: u32 = 32;
pub const vpiWeakDrive: u32 = 8;
pub const vpiLargeCharge: u32 = 16;
pub const vpiMediumCharge: u32 = 4;
pub const vpiSmallCharge: u32 = 2;
pub const vpiHiZ: u32 = 1;
pub const vpiBinStrVal: u32 = 1;
pub const vpiOctStrVal: u32 = 2;
pub const vpiDecStrVal: u32 = 3;
pub const vpiHexStrVal: u32 = 4;
pub const vpiScalarVal: u32 = 5;
pub const vpiIntVal: u32 = 6;
pub const vpiRealVal: u32 = 7;
pub const vpiStringVal: u32 = 8;
pub const vpiVectorVal: u32 = 9;
pub const vpiStrengthVal: u32 = 10;
pub const vpiTimeVal: u32 = 11;
pub const vpiObjTypeVal: u32 = 12;
pub const vpiSuppressVal: u32 = 13;
pub const vpiShortIntVal: u32 = 14;
pub const vpiLongIntVal: u32 = 15;
pub const vpiShortRealVal: u32 = 16;
pub const vpiRawTwoStateVal: u32 = 17;
pub const vpiRawFourStateVal: u32 = 18;
pub const vpiNoDelay: u32 = 1;
pub const vpiInertialDelay: u32 = 2;
pub const vpiTransportDelay: u32 = 3;
pub const vpiPureTransportDelay: u32 = 4;
pub const vpiForceFlag: u32 = 5;
pub const vpiReleaseFlag: u32 = 6;
pub const vpiCancelEvent: u32 = 7;
pub const vpiReturnEvent: u32 = 4096;
pub const vpiUserAllocFlag: u32 = 8192;
pub const vpiOneValue: u32 = 16384;
pub const vpiPropagateOff: u32 = 32768;
pub const vpi0: u32 = 0;
pub const vpi1: u32 = 1;
pub const vpiZ: u32 = 2;
pub const vpiX: u32 = 3;
pub const vpiH: u32 = 4;
pub const vpiL: u32 = 5;
pub const vpiDontCare: u32 = 6;
pub const vpiSysTask: u32 = 1;
pub const vpiSysFunc: u32 = 2;
pub const vpiCompile: u32 = 1;
pub const vpiPLI: u32 = 2;
pub const vpiRun: u32 = 3;
pub const vpiNotice: u32 = 1;
pub const vpiWarning: u32 = 2;
pub const vpiError: u32 = 3;
pub const vpiSystem: u32 = 4;
pub const vpiInternal: u32 = 5;
pub const cbValueChange: u32 = 1;
pub const cbStmt: u32 = 2;
pub const cbForce: u32 = 3;
pub const cbRelease: u32 = 4;
pub const cbAtStartOfSimTime: u32 = 5;
pub const cbReadWriteSynch: u32 = 6;
pub const cbReadOnlySynch: u32 = 7;
pub const cbNextSimTime: u32 = 8;
pub const cbAfterDelay: u32 = 9;
pub const cbEndOfCompile: u32 = 10;
pub const cbStartOfSimulation: u32 = 11;
pub const cbEndOfSimulation: u32 = 12;
pub const cbError: u32 = 13;
pub const cbTchkViolation: u32 = 14;
pub const cbStartOfSave: u32 = 15;
pub const cbEndOfSave: u32 = 16;
pub const cbStartOfRestart: u32 = 17;
pub const cbEndOfRestart: u32 = 18;
pub const cbStartOfReset: u32 = 19;
pub const cbEndOfReset: u32 = 20;
pub const cbEnterInteractive: u32 = 21;
pub const cbExitInteractive: u32 = 22;
pub const cbInteractiveScopeChange: u32 = 23;
pub const cbUnresolvedSystf: u32 = 24;
pub const cbAssign: u32 = 25;
pub const cbDeassign: u32 = 26;
pub const cbDisable: u32 = 27;
pub const cbPLIError: u32 = 28;
pub const cbSignal: u32 = 29;
pub const cbNBASynch: u32 = 30;
pub const cbAtEndOfSimTime: u32 = 31;
pub type __gnuc_va_list = __builtin_va_list;
pub type va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type PLI_INT64 = i64;
pub type PLI_UINT64 = u64;
pub type PLI_INT32 = ::std::os::raw::c_int;
pub type PLI_UINT32 = ::std::os::raw::c_uint;
pub type PLI_INT16 = ::std::os::raw::c_short;
pub type PLI_UINT16 = ::std::os::raw::c_ushort;
pub type PLI_BYTE8 = ::std::os::raw::c_char;
pub type PLI_UBYTE8 = ::std::os::raw::c_uchar;
#[doc = " TYPEDEFS"]
pub type vpiHandle = *mut PLI_UINT32;
#[doc = " time structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_time {
    pub type_: PLI_INT32,
    pub high: PLI_UINT32,
    pub low: PLI_UINT32,
    pub real: f64,
}
#[test]
fn bindgen_test_layout_t_vpi_time() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_time> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_time>(),
        24usize,
        concat!("Size of: ", stringify!(t_vpi_time))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_time>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_time))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_time),
            "::",
            stringify!(real)
        )
    );
}
#[doc = " time structure"]
pub type s_vpi_time = t_vpi_time;
#[doc = " time structure"]
pub type p_vpi_time = *mut t_vpi_time;
#[doc = " delay structures"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_delay {
    pub da: *mut t_vpi_time,
    pub no_of_delays: PLI_INT32,
    pub time_type: PLI_INT32,
    pub mtm_flag: PLI_INT32,
    pub append_flag: PLI_INT32,
    pub pulsere_flag: PLI_INT32,
}
#[test]
fn bindgen_test_layout_t_vpi_delay() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_delay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_delay>(),
        32usize,
        concat!("Size of: ", stringify!(t_vpi_delay))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_delay>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_delay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).da) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_delay),
            "::",
            stringify!(da)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_of_delays) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_delay),
            "::",
            stringify!(no_of_delays)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_delay),
            "::",
            stringify!(time_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtm_flag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_delay),
            "::",
            stringify!(mtm_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).append_flag) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_delay),
            "::",
            stringify!(append_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pulsere_flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_delay),
            "::",
            stringify!(pulsere_flag)
        )
    );
}
#[doc = " delay structures"]
pub type s_vpi_delay = t_vpi_delay;
#[doc = " delay structures"]
pub type p_vpi_delay = *mut t_vpi_delay;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_vecval {
    pub aval: PLI_INT32,
    pub bval: PLI_INT32,
}
#[test]
fn bindgen_test_layout_t_vpi_vecval() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_vecval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_vecval>(),
        8usize,
        concat!("Size of: ", stringify!(t_vpi_vecval))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_vecval>(),
        4usize,
        concat!("Alignment of ", stringify!(t_vpi_vecval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vecval),
            "::",
            stringify!(aval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bval) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vecval),
            "::",
            stringify!(bval)
        )
    );
}
pub type s_vpi_vecval = t_vpi_vecval;
pub type p_vpi_vecval = *mut t_vpi_vecval;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_strengthval {
    pub logic: PLI_INT32,
    pub s0: PLI_INT32,
    pub s1: PLI_INT32,
}
#[test]
fn bindgen_test_layout_t_vpi_strengthval() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_strengthval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_strengthval>(),
        12usize,
        concat!("Size of: ", stringify!(t_vpi_strengthval))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_strengthval>(),
        4usize,
        concat!("Alignment of ", stringify!(t_vpi_strengthval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_strengthval),
            "::",
            stringify!(logic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s0) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_strengthval),
            "::",
            stringify!(s0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s1) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_strengthval),
            "::",
            stringify!(s1)
        )
    );
}
pub type s_vpi_strengthval = t_vpi_strengthval;
pub type p_vpi_strengthval = *mut t_vpi_strengthval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_vpi_value {
    pub format: PLI_INT32,
    pub value: t_vpi_value__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_vpi_value__bindgen_ty_1 {
    pub str_: *mut PLI_BYTE8,
    pub scalar: PLI_INT32,
    pub integer: PLI_INT32,
    pub real: f64,
    pub time: *mut t_vpi_time,
    pub vector: *mut t_vpi_vecval,
    pub strength: *mut t_vpi_strengthval,
    pub misc: *mut PLI_BYTE8,
}
#[test]
fn bindgen_test_layout_t_vpi_value__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_value__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_value__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(t_vpi_value__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_value__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_value__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).str_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(str_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scalar) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(scalar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vector) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strength) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(strength)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).misc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value__bindgen_ty_1),
            "::",
            stringify!(misc)
        )
    );
}
#[test]
fn bindgen_test_layout_t_vpi_value() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_value>(),
        16usize,
        concat!("Size of: ", stringify!(t_vpi_value))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_value>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_value),
            "::",
            stringify!(value)
        )
    );
}
pub type s_vpi_value = t_vpi_value;
pub type p_vpi_value = *mut t_vpi_value;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_vpi_arrayvalue {
    pub format: PLI_UINT32,
    pub flags: PLI_UINT32,
    pub value: t_vpi_arrayvalue__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union t_vpi_arrayvalue__bindgen_ty_1 {
    pub integers: *mut PLI_INT32,
    pub shortints: *mut PLI_INT16,
    pub longints: *mut PLI_INT64,
    pub rawvals: *mut PLI_BYTE8,
    pub vectors: *mut t_vpi_vecval,
    pub times: *mut t_vpi_time,
    pub reals: *mut f64,
    pub shortreals: *mut f32,
}
#[test]
fn bindgen_test_layout_t_vpi_arrayvalue__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_arrayvalue__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_arrayvalue__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(t_vpi_arrayvalue__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_arrayvalue__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_arrayvalue__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).integers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(integers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(shortints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).longints) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(longints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rawvals) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(rawvals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vectors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(vectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).times) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(times)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reals) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(reals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shortreals) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue__bindgen_ty_1),
            "::",
            stringify!(shortreals)
        )
    );
}
#[test]
fn bindgen_test_layout_t_vpi_arrayvalue() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_arrayvalue> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_arrayvalue>(),
        16usize,
        concat!("Size of: ", stringify!(t_vpi_arrayvalue))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_arrayvalue>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_arrayvalue))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_arrayvalue),
            "::",
            stringify!(value)
        )
    );
}
pub type s_vpi_arrayvalue = t_vpi_arrayvalue;
pub type p_vpi_arrayvalue = *mut t_vpi_arrayvalue;
#[doc = " system task/function structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_systf_data {
    pub type_: PLI_INT32,
    pub sysfunctype: PLI_INT32,
    pub tfname: *const PLI_BYTE8,
    pub calltf: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLI_BYTE8) -> PLI_INT32>,
    pub compiletf: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLI_BYTE8) -> PLI_INT32>,
    pub sizetf: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLI_BYTE8) -> PLI_INT32>,
    pub user_data: *mut PLI_BYTE8,
}
#[test]
fn bindgen_test_layout_t_vpi_systf_data() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_systf_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_systf_data>(),
        48usize,
        concat!("Size of: ", stringify!(t_vpi_systf_data))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_systf_data>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_systf_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sysfunctype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(sysfunctype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(tfname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calltf) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(calltf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compiletf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(compiletf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizetf) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(sizetf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_systf_data),
            "::",
            stringify!(user_data)
        )
    );
}
#[doc = " system task/function structure"]
pub type s_vpi_systf_data = t_vpi_systf_data;
#[doc = " system task/function structure"]
pub type p_vpi_systf_data = *mut t_vpi_systf_data;
#[doc = " Verilog execution information structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_vlog_info {
    pub argc: PLI_INT32,
    pub argv: *mut *mut PLI_BYTE8,
    pub product: *mut PLI_BYTE8,
    pub version: *mut PLI_BYTE8,
}
#[test]
fn bindgen_test_layout_t_vpi_vlog_info() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_vlog_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_vlog_info>(),
        32usize,
        concat!("Size of: ", stringify!(t_vpi_vlog_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_vlog_info>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_vlog_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vlog_info),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vlog_info),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vlog_info),
            "::",
            stringify!(product)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_vlog_info),
            "::",
            stringify!(version)
        )
    );
}
#[doc = " Verilog execution information structure"]
pub type s_vpi_vlog_info = t_vpi_vlog_info;
#[doc = " Verilog execution information structure"]
pub type p_vpi_vlog_info = *mut t_vpi_vlog_info;
#[doc = " PLI error information structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_vpi_error_info {
    pub state: PLI_INT32,
    pub level: PLI_INT32,
    pub message: *mut PLI_BYTE8,
    pub product: *mut PLI_BYTE8,
    pub code: *mut PLI_BYTE8,
    pub file: *mut PLI_BYTE8,
    pub line: PLI_INT32,
}
#[test]
fn bindgen_test_layout_t_vpi_error_info() {
    const UNINIT: ::std::mem::MaybeUninit<t_vpi_error_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_vpi_error_info>(),
        48usize,
        concat!("Size of: ", stringify!(t_vpi_error_info))
    );
    assert_eq!(
        ::std::mem::align_of::<t_vpi_error_info>(),
        8usize,
        concat!("Alignment of ", stringify!(t_vpi_error_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(message)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).product) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(product)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).line) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t_vpi_error_info),
            "::",
            stringify!(line)
        )
    );
}
#[doc = " PLI error information structure"]
pub type s_vpi_error_info = t_vpi_error_info;
#[doc = " PLI error information structure"]
pub type p_vpi_error_info = *mut t_vpi_error_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_cb_data {
    pub reason: PLI_INT32,
    pub cb_rtn: ::std::option::Option<unsafe extern "C" fn(arg1: *mut t_cb_data) -> PLI_INT32>,
    pub obj: vpiHandle,
    pub time: p_vpi_time,
    pub value: p_vpi_value,
    pub index: PLI_INT32,
    pub user_data: *mut PLI_BYTE8,
}
#[test]
fn bindgen_test_layout_t_cb_data() {
    const UNINIT: ::std::mem::MaybeUninit<t_cb_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<t_cb_data>(),
        56usize,
        concat!("Size of: ", stringify!(t_cb_data))
    );
    assert_eq!(
        ::std::mem::align_of::<t_cb_data>(),
        8usize,
        concat!("Alignment of ", stringify!(t_cb_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reason) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_rtn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(cb_rtn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obj) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(t_cb_data),
            "::",
            stringify!(user_data)
        )
    );
}
pub type s_cb_data = t_cb_data;
pub type p_cb_data = *mut t_cb_data;
extern "C" {
    #[doc = " FUNCTION DECLARATIONS"]
    pub fn vpi_register_cb(cb_data_p: p_cb_data) -> vpiHandle;
}
extern "C" {
    pub fn vpi_remove_cb(cb_obj: vpiHandle) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_get_cb_info(object: vpiHandle, cb_data_p: p_cb_data);
}
extern "C" {
    pub fn vpi_register_systf(systf_data_p: p_vpi_systf_data) -> vpiHandle;
}
extern "C" {
    pub fn vpi_get_systf_info(object: vpiHandle, systf_data_p: p_vpi_systf_data);
}
extern "C" {
    pub fn vpi_handle_by_name(name: *mut PLI_BYTE8, scope: vpiHandle) -> vpiHandle;
}
extern "C" {
    pub fn vpi_handle_by_index(object: vpiHandle, indx: PLI_INT32) -> vpiHandle;
}
extern "C" {
    pub fn vpi_handle(type_: PLI_INT32, refHandle: vpiHandle) -> vpiHandle;
}
extern "C" {
    pub fn vpi_handle_multi(
        type_: PLI_INT32,
        refHandle1: vpiHandle,
        refHandle2: vpiHandle,
        ...
    ) -> vpiHandle;
}
extern "C" {
    pub fn vpi_iterate(type_: PLI_INT32, refHandle: vpiHandle) -> vpiHandle;
}
extern "C" {
    pub fn vpi_scan(iterator: vpiHandle) -> vpiHandle;
}
extern "C" {
    pub fn vpi_get(property: PLI_INT32, object: vpiHandle) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_get64(property: PLI_INT32, object: vpiHandle) -> PLI_INT64;
}
extern "C" {
    pub fn vpi_get_str(property: PLI_INT32, object: vpiHandle) -> *mut PLI_BYTE8;
}
extern "C" {
    pub fn vpi_get_delays(object: vpiHandle, delay_p: p_vpi_delay);
}
extern "C" {
    pub fn vpi_put_delays(object: vpiHandle, delay_p: p_vpi_delay);
}
extern "C" {
    pub fn vpi_get_value(expr: vpiHandle, value_p: p_vpi_value);
}
extern "C" {
    pub fn vpi_put_value(
        object: vpiHandle,
        value_p: p_vpi_value,
        time_p: p_vpi_time,
        flags: PLI_INT32,
    ) -> vpiHandle;
}
extern "C" {
    pub fn vpi_get_value_array(
        expr: vpiHandle,
        arrayvalue_p: p_vpi_arrayvalue,
        index_p: *mut PLI_INT32,
        num: PLI_UINT32,
    );
}
extern "C" {
    pub fn vpi_put_value_array(
        object: vpiHandle,
        arrayvalue_p: p_vpi_arrayvalue,
        index_p: *mut PLI_INT32,
        num: PLI_UINT32,
    );
}
extern "C" {
    pub fn vpi_get_time(object: vpiHandle, time_p: p_vpi_time);
}
extern "C" {
    pub fn vpi_mcd_open(fileName: *const PLI_BYTE8) -> PLI_UINT32;
}
extern "C" {
    pub fn vpi_mcd_close(mcd: PLI_UINT32) -> PLI_UINT32;
}
extern "C" {
    pub fn vpi_mcd_name(cd: PLI_UINT32) -> *mut PLI_BYTE8;
}
extern "C" {
    pub fn vpi_mcd_printf(mcd: PLI_UINT32, format: *const PLI_BYTE8, ...) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_printf(format: *const PLI_BYTE8, ...) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_compare_objects(object1: vpiHandle, object2: vpiHandle) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_chk_error(error_info_p: p_vpi_error_info) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_free_object(object: vpiHandle) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_release_handle(object: vpiHandle) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_get_vlog_info(vlog_info_p: p_vpi_vlog_info) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_get_data(id: PLI_INT32, dataLoc: *mut PLI_BYTE8, numOfBytes: PLI_INT32)
        -> PLI_INT32;
}
extern "C" {
    pub fn vpi_put_data(id: PLI_INT32, dataLoc: *mut PLI_BYTE8, numOfBytes: PLI_INT32)
        -> PLI_INT32;
}
extern "C" {
    pub fn vpi_get_userdata(obj: vpiHandle) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vpi_put_userdata(obj: vpiHandle, userdata: *mut ::std::os::raw::c_void) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_vprintf(format: *const PLI_BYTE8, ap: *mut __va_list_tag) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_mcd_vprintf(
        mcd: PLI_UINT32,
        format: *const PLI_BYTE8,
        ap: *mut __va_list_tag,
    ) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_flush() -> PLI_INT32;
}
extern "C" {
    pub fn vpi_mcd_flush(mcd: PLI_UINT32) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_control(operation: PLI_INT32, ...) -> PLI_INT32;
}
extern "C" {
    pub fn vpi_handle_by_multi_index(
        obj: vpiHandle,
        num_index: PLI_INT32,
        index_array: *mut PLI_INT32,
    ) -> vpiHandle;
}
extern "C" {
    #[doc = " GLOBAL VARIABLES"]
    pub static mut vlog_startup_routines: [::std::option::Option<unsafe extern "C" fn()>; 0usize];
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
